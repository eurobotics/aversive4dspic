== AVERSIVE4DSPIC ==

=== Introduction

Aversive is a development framework for AVR. You need avr-gcc to run
it. The goal of this project is to provide modules to make development
on avr easier.

Aversive4dspic adds the support for dsPIC MCUs.

Untar the archive (or checkout it from the Git), run ./configure, it
will generate several Makefiles (if you skip this step, the main
Makefile will automatiquely do it for you). You can edit these files
to customize some settings. You can now type make to compile all tests
programs of the framework. If you want to create a new project, there
are some examples.

This is a development version, there are certainly a lot of
bugs. Don't hesitate to tell us if you find one.
->      avr-list@droids-corp.org
->		eurobotics@arc-robots.org (dsPICs support)


There's a page about the original Aversive project :
->	http://wiki.droids-corp.org/articles/a/v/e/Aversive.html

=== The aversive/aversive4dspic source tree

NOTE: all dsPIC modules are placed in a folder named "dspic"

config                  -> files related to aversive configuration
  config/fuses_defs     -> fuse names and help
  config/gen_headers    -> dirty scripts for generating some .h
  config/scripts        -> project configuration scripts (imported 
                           from linux-2.4 kernel)

include                 -> generic Aversive include files, that are
			   not related to a module

mk                      -> Aversive Makefiles (project, module, and
			   templates) 

modules                 -> modules directory. A "module" is a small
			   library that provide a specific
			   functionnality
  modules/base          -> common modules, frequently used
  modules/comm          -> communication modules (uart, spi, i2c, ...)
  modules/crypto        -> modules for cryptographic operations
  modules/debug         -> helper modules for debugging
  modules/devices       -> modules related to a device that is not
			   part of an Atmel AVR (lcd, motors, ...)
  modules/encoding      -> buffer conversion (base64, hamming)
  modules/hardware      -> generic interfaces module for specific AVR
			   hardware (timers, ADC, ...)
  modules/ihm           -> Human-machine interface modules (menu, and
			   probably a future CLI)

projects                -> Project examples (to be enhanced)
  projects/example1
  projects/example2

=== Using Aversive4dspic

You need MplabX and C30 compiller to use Aversive4dspic. 

== Create a directory for your project

Create a Makefile:

	cp $(AVERSIVE_DIR)/mk/Makefile_project.template Makefile

Edit the Makefile and customize the following values :

	AVERSIVE_DIR = # VALUE, absolute or relative path to the root of aversive
	SRC = $(TARGET).c another_file.c another_file2.c 

You can see examples in Makefiles located in $(AVERSIVE_DIR)/modules/.../test directories. 

Warning : check that you don't have space chars after you variables declarations.

Create your sources file (*.c).
One of your file must have a main() function.

== Configure the project

In an aversive project, you need an .config file, that describes which options are enabled (like in the linux kernel).

Two files are generated from it: .aversive_conf and autoconf.h:

- .aversive_conf is included in the project Makefile 
- autoconf.h file is included in base/utils/utils.h

If you want to edit something by hands, you should not edit .aversive_conf or autoconf.h, but .config... Don't worry, you won't have to edit this .config file by hands since there are 
configure scripts. So just run :

	make config

Then answer to the questions. You can answer '?' if you want some help.

There is another way to configure :

	make noconfig

This will create a .config file if it does not exists. You can edit it by hand, and run back 'make noconfig' to update your .aversive_conf and autoconf.h

== Build the project

Build your project using MplabX.

== Program the target

Program your target form MplabX selecting your programmer (ICD2, Pickit, ...).


=== Using Aversive

You need avr-gcc/avr-libc to use Aversive. 

Once you have untared the archive (or checkouted it from the CVS), you
can run 'make' to compile all tests programs.

If you want to compile a test program:

cd projects/example1
make menuconfig 
make

You can find a delailed steps here: 

http://wiki.droids-corp.org/articles/a/v/e/Aversive/Devguide.html#How_to_create_a_new_project_using_Aversive_.3F

=== Authors

See AUTHORS file for details.

Aversive main authors:

- Christophe RIEHL
- Olivier MATZ

Aversive4dspic authors:

- Javier Bali√±as

(Droids-Corporation, Microb Technology, Eirbot, Eurobotics Engineering)




